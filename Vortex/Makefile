# GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug_x86
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild prelink

ifeq ($(config),debug_x86)
  RESCOMP = windres
  TARGETDIR = ../bin/Debug-linux-x86/Vortex
  TARGET = $(TARGETDIR)/libVortex.a
  OBJDIR = ../bin-int/Debug-linux-x86/Vortex
  PCH = source/vpch.h
  GCH = $(OBJDIR)/$(notdir $(PCH)).gch
  DEFINES += -D_CRT_SECURE_NO_WARNINGS -DVE_PLATFORM_LINUX -DVE_DEBUG
  INCLUDES += -Isource -IthirdParty/spdlog/include -I../include -IthirdParty/Glad/include -IthirdParty/glm -IthirdParty/imgui -IthirdParty/Entt/include -IthirdParty/stb_image -IthirdParty/Assimp/include
  FORCE_INCLUDE += -include $(OBJDIR)/$(notdir $(PCH))
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32 -g -O2 -fcoroutines
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32 -g -std=c++2a -O2 -fcoroutines
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += thirdParty/Glad/bin/Debug-linux-x86/Glad/libGlad.a thirdParty/Assimp/bin/Debug-linux-x86/Assimp/libAssimp.a thirdParty/imgui/bin/Debug-linux-x86/ImGui/libImGui.a -lopengl32.lib -lSDL2
  LDDEPS += thirdParty/Glad/bin/Debug-linux-x86/Glad/libGlad.a thirdParty/Assimp/bin/Debug-linux-x86/Assimp/libAssimp.a thirdParty/imgui/bin/Debug-linux-x86/ImGui/libImGui.a
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib32 -m32
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),debug_x64)
  RESCOMP = windres
  TARGETDIR = ../bin/Debug-linux-x86_64/Vortex
  TARGET = $(TARGETDIR)/libVortex.a
  OBJDIR = ../bin-int/Debug-linux-x86_64/Vortex
  PCH = source/vpch.h
  GCH = $(OBJDIR)/$(notdir $(PCH)).gch
  DEFINES += -D_CRT_SECURE_NO_WARNINGS -DVE_PLATFORM_LINUX -DVE_DEBUG
  INCLUDES += -Isource -IthirdParty/spdlog/include -I../include -IthirdParty/Glad/include -IthirdParty/glm -IthirdParty/imgui -IthirdParty/Entt/include -IthirdParty/stb_image -IthirdParty/Assimp/include
  FORCE_INCLUDE += -include $(OBJDIR)/$(notdir $(PCH))
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -g -O2 -fcoroutines
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -g -std=c++2a -O2 -fcoroutines
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += thirdParty/Glad/bin/Debug-linux-x86_64/Glad/libGlad.a thirdParty/Assimp/bin/Debug-linux-x86_64/Assimp/libAssimp.a thirdParty/imgui/bin/Debug-linux-x86_64/ImGui/libImGui.a -lopengl32.lib -lSDL2
  LDDEPS += thirdParty/Glad/bin/Debug-linux-x86_64/Glad/libGlad.a thirdParty/Assimp/bin/Debug-linux-x86_64/Assimp/libAssimp.a thirdParty/imgui/bin/Debug-linux-x86_64/ImGui/libImGui.a
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),debug_arm)
  RESCOMP = windres
  TARGETDIR = ../bin/Debug-linux-ARM/Vortex
  TARGET = $(TARGETDIR)/libVortex.a
  OBJDIR = ../bin-int/Debug-linux-ARM/Vortex
  PCH = source/vpch.h
  GCH = $(OBJDIR)/$(notdir $(PCH)).gch
  DEFINES += -D_CRT_SECURE_NO_WARNINGS -DVE_PLATFORM_LINUX -DVE_DEBUG
  INCLUDES += -Isource -IthirdParty/spdlog/include -I../include -IthirdParty/Glad/include -IthirdParty/glm -IthirdParty/imgui -IthirdParty/Entt/include -IthirdParty/stb_image -IthirdParty/Assimp/include
  FORCE_INCLUDE += -include $(OBJDIR)/$(notdir $(PCH))
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -g -O2 -fcoroutines
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -g -std=c++2a -O2 -fcoroutines
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += thirdParty/Glad/bin/Debug-linux-ARM/Glad/libGlad.a thirdParty/Assimp/bin/Debug-linux-ARM/Assimp/libAssimp.a thirdParty/imgui/bin/Debug-linux-ARM/ImGui/libImGui.a -lopengl32.lib -lSDL2
  LDDEPS += thirdParty/Glad/bin/Debug-linux-ARM/Glad/libGlad.a thirdParty/Assimp/bin/Debug-linux-ARM/Assimp/libAssimp.a thirdParty/imgui/bin/Debug-linux-ARM/ImGui/libImGui.a
  ALL_LDFLAGS += $(LDFLAGS)
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),debug_arm64)
  RESCOMP = windres
  TARGETDIR = ../bin/Debug-linux-ARM64/Vortex
  TARGET = $(TARGETDIR)/libVortex.a
  OBJDIR = ../bin-int/Debug-linux-ARM64/Vortex
  PCH = source/vpch.h
  GCH = $(OBJDIR)/$(notdir $(PCH)).gch
  DEFINES += -D_CRT_SECURE_NO_WARNINGS -DVE_PLATFORM_LINUX -DVE_DEBUG
  INCLUDES += -Isource -IthirdParty/spdlog/include -I../include -IthirdParty/Glad/include -IthirdParty/glm -IthirdParty/imgui -IthirdParty/Entt/include -IthirdParty/stb_image -IthirdParty/Assimp/include
  FORCE_INCLUDE += -include $(OBJDIR)/$(notdir $(PCH))
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -g -O2 -fcoroutines
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -g -std=c++2a -O2 -fcoroutines
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += thirdParty/Glad/bin/Debug-linux-ARM64/Glad/libGlad.a thirdParty/Assimp/bin/Debug-linux-ARM64/Assimp/libAssimp.a thirdParty/imgui/bin/Debug-linux-ARM64/ImGui/libImGui.a -lopengl32.lib -lSDL2
  LDDEPS += thirdParty/Glad/bin/Debug-linux-ARM64/Glad/libGlad.a thirdParty/Assimp/bin/Debug-linux-ARM64/Assimp/libAssimp.a thirdParty/imgui/bin/Debug-linux-ARM64/ImGui/libImGui.a
  ALL_LDFLAGS += $(LDFLAGS)
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),release_x86)
  RESCOMP = windres
  TARGETDIR = ../bin/Release-linux-x86/Vortex
  TARGET = $(TARGETDIR)/libVortex.a
  OBJDIR = ../bin-int/Release-linux-x86/Vortex
  PCH = source/vpch.h
  GCH = $(OBJDIR)/$(notdir $(PCH)).gch
  DEFINES += -D_CRT_SECURE_NO_WARNINGS -DVE_PLATFORM_LINUX -DVE_RELEASE
  INCLUDES += -Isource -IthirdParty/spdlog/include -I../include -IthirdParty/Glad/include -IthirdParty/glm -IthirdParty/imgui -IthirdParty/Entt/include -IthirdParty/stb_image -IthirdParty/Assimp/include
  FORCE_INCLUDE += -include $(OBJDIR)/$(notdir $(PCH))
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32 -O2 -O2 -fcoroutines
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32 -O2 -std=c++2a -O2 -fcoroutines
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += thirdParty/Glad/bin/Release-linux-x86/Glad/libGlad.a thirdParty/Assimp/bin/Release-linux-x86/Assimp/libAssimp.a thirdParty/imgui/bin/Release-linux-x86/ImGui/libImGui.a -lopengl32.lib -lSDL2
  LDDEPS += thirdParty/Glad/bin/Release-linux-x86/Glad/libGlad.a thirdParty/Assimp/bin/Release-linux-x86/Assimp/libAssimp.a thirdParty/imgui/bin/Release-linux-x86/ImGui/libImGui.a
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib32 -m32 -s
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),release_x64)
  RESCOMP = windres
  TARGETDIR = ../bin/Release-linux-x86_64/Vortex
  TARGET = $(TARGETDIR)/libVortex.a
  OBJDIR = ../bin-int/Release-linux-x86_64/Vortex
  PCH = source/vpch.h
  GCH = $(OBJDIR)/$(notdir $(PCH)).gch
  DEFINES += -D_CRT_SECURE_NO_WARNINGS -DVE_PLATFORM_LINUX -DVE_RELEASE
  INCLUDES += -Isource -IthirdParty/spdlog/include -I../include -IthirdParty/Glad/include -IthirdParty/glm -IthirdParty/imgui -IthirdParty/Entt/include -IthirdParty/stb_image -IthirdParty/Assimp/include
  FORCE_INCLUDE += -include $(OBJDIR)/$(notdir $(PCH))
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -O2 -fcoroutines
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -std=c++2a -O2 -fcoroutines
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += thirdParty/Glad/bin/Release-linux-x86_64/Glad/libGlad.a thirdParty/Assimp/bin/Release-linux-x86_64/Assimp/libAssimp.a thirdParty/imgui/bin/Release-linux-x86_64/ImGui/libImGui.a -lopengl32.lib -lSDL2
  LDDEPS += thirdParty/Glad/bin/Release-linux-x86_64/Glad/libGlad.a thirdParty/Assimp/bin/Release-linux-x86_64/Assimp/libAssimp.a thirdParty/imgui/bin/Release-linux-x86_64/ImGui/libImGui.a
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -s
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),release_arm)
  RESCOMP = windres
  TARGETDIR = ../bin/Release-linux-ARM/Vortex
  TARGET = $(TARGETDIR)/libVortex.a
  OBJDIR = ../bin-int/Release-linux-ARM/Vortex
  PCH = source/vpch.h
  GCH = $(OBJDIR)/$(notdir $(PCH)).gch
  DEFINES += -D_CRT_SECURE_NO_WARNINGS -DVE_PLATFORM_LINUX -DVE_RELEASE
  INCLUDES += -Isource -IthirdParty/spdlog/include -I../include -IthirdParty/Glad/include -IthirdParty/glm -IthirdParty/imgui -IthirdParty/Entt/include -IthirdParty/stb_image -IthirdParty/Assimp/include
  FORCE_INCLUDE += -include $(OBJDIR)/$(notdir $(PCH))
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O2 -O2 -fcoroutines
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O2 -std=c++2a -O2 -fcoroutines
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += thirdParty/Glad/bin/Release-linux-ARM/Glad/libGlad.a thirdParty/Assimp/bin/Release-linux-ARM/Assimp/libAssimp.a thirdParty/imgui/bin/Release-linux-ARM/ImGui/libImGui.a -lopengl32.lib -lSDL2
  LDDEPS += thirdParty/Glad/bin/Release-linux-ARM/Glad/libGlad.a thirdParty/Assimp/bin/Release-linux-ARM/Assimp/libAssimp.a thirdParty/imgui/bin/Release-linux-ARM/ImGui/libImGui.a
  ALL_LDFLAGS += $(LDFLAGS) -s
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),release_arm64)
  RESCOMP = windres
  TARGETDIR = ../bin/Release-linux-ARM64/Vortex
  TARGET = $(TARGETDIR)/libVortex.a
  OBJDIR = ../bin-int/Release-linux-ARM64/Vortex
  PCH = source/vpch.h
  GCH = $(OBJDIR)/$(notdir $(PCH)).gch
  DEFINES += -D_CRT_SECURE_NO_WARNINGS -DVE_PLATFORM_LINUX -DVE_RELEASE
  INCLUDES += -Isource -IthirdParty/spdlog/include -I../include -IthirdParty/Glad/include -IthirdParty/glm -IthirdParty/imgui -IthirdParty/Entt/include -IthirdParty/stb_image -IthirdParty/Assimp/include
  FORCE_INCLUDE += -include $(OBJDIR)/$(notdir $(PCH))
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O2 -O2 -fcoroutines
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O2 -std=c++2a -O2 -fcoroutines
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += thirdParty/Glad/bin/Release-linux-ARM64/Glad/libGlad.a thirdParty/Assimp/bin/Release-linux-ARM64/Assimp/libAssimp.a thirdParty/imgui/bin/Release-linux-ARM64/ImGui/libImGui.a -lopengl32.lib -lSDL2
  LDDEPS += thirdParty/Glad/bin/Release-linux-ARM64/Glad/libGlad.a thirdParty/Assimp/bin/Release-linux-ARM64/Assimp/libAssimp.a thirdParty/imgui/bin/Release-linux-ARM64/ImGui/libImGui.a
  ALL_LDFLAGS += $(LDFLAGS) -s
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),dist_x86)
  RESCOMP = windres
  TARGETDIR = ../bin/Dist-linux-x86/Vortex
  TARGET = $(TARGETDIR)/libVortex.a
  OBJDIR = ../bin-int/Dist-linux-x86/Vortex
  PCH = source/vpch.h
  GCH = $(OBJDIR)/$(notdir $(PCH)).gch
  DEFINES += -D_CRT_SECURE_NO_WARNINGS -DVE_PLATFORM_LINUX -DVE_DIST
  INCLUDES += -Isource -IthirdParty/spdlog/include -I../include -IthirdParty/Glad/include -IthirdParty/glm -IthirdParty/imgui -IthirdParty/Entt/include -IthirdParty/stb_image -IthirdParty/Assimp/include
  FORCE_INCLUDE += -include $(OBJDIR)/$(notdir $(PCH))
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32 -O2 -O2 -fcoroutines
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32 -O2 -std=c++2a -O2 -fcoroutines
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += thirdParty/Glad/bin/Dist-linux-x86/Glad/libGlad.a thirdParty/Assimp/bin/Dist-linux-x86/Assimp/libAssimp.a thirdParty/imgui/bin/Dist-linux-x86/ImGui/libImGui.a -lopengl32.lib -lSDL2
  LDDEPS += thirdParty/Glad/bin/Dist-linux-x86/Glad/libGlad.a thirdParty/Assimp/bin/Dist-linux-x86/Assimp/libAssimp.a thirdParty/imgui/bin/Dist-linux-x86/ImGui/libImGui.a
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib32 -m32 -s
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),dist_x64)
  RESCOMP = windres
  TARGETDIR = ../bin/Dist-linux-x86_64/Vortex
  TARGET = $(TARGETDIR)/libVortex.a
  OBJDIR = ../bin-int/Dist-linux-x86_64/Vortex
  PCH = source/vpch.h
  GCH = $(OBJDIR)/$(notdir $(PCH)).gch
  DEFINES += -D_CRT_SECURE_NO_WARNINGS -DVE_PLATFORM_LINUX -DVE_DIST
  INCLUDES += -Isource -IthirdParty/spdlog/include -I../include -IthirdParty/Glad/include -IthirdParty/glm -IthirdParty/imgui -IthirdParty/Entt/include -IthirdParty/stb_image -IthirdParty/Assimp/include
  FORCE_INCLUDE += -include $(OBJDIR)/$(notdir $(PCH))
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -O2 -fcoroutines
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -std=c++2a -O2 -fcoroutines
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += thirdParty/Glad/bin/Dist-linux-x86_64/Glad/libGlad.a thirdParty/Assimp/bin/Dist-linux-x86_64/Assimp/libAssimp.a thirdParty/imgui/bin/Dist-linux-x86_64/ImGui/libImGui.a -lopengl32.lib -lSDL2
  LDDEPS += thirdParty/Glad/bin/Dist-linux-x86_64/Glad/libGlad.a thirdParty/Assimp/bin/Dist-linux-x86_64/Assimp/libAssimp.a thirdParty/imgui/bin/Dist-linux-x86_64/ImGui/libImGui.a
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -s
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),dist_arm)
  RESCOMP = windres
  TARGETDIR = ../bin/Dist-linux-ARM/Vortex
  TARGET = $(TARGETDIR)/libVortex.a
  OBJDIR = ../bin-int/Dist-linux-ARM/Vortex
  PCH = source/vpch.h
  GCH = $(OBJDIR)/$(notdir $(PCH)).gch
  DEFINES += -D_CRT_SECURE_NO_WARNINGS -DVE_PLATFORM_LINUX -DVE_DIST
  INCLUDES += -Isource -IthirdParty/spdlog/include -I../include -IthirdParty/Glad/include -IthirdParty/glm -IthirdParty/imgui -IthirdParty/Entt/include -IthirdParty/stb_image -IthirdParty/Assimp/include
  FORCE_INCLUDE += -include $(OBJDIR)/$(notdir $(PCH))
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O2 -O2 -fcoroutines
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O2 -std=c++2a -O2 -fcoroutines
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += thirdParty/Glad/bin/Dist-linux-ARM/Glad/libGlad.a thirdParty/Assimp/bin/Dist-linux-ARM/Assimp/libAssimp.a thirdParty/imgui/bin/Dist-linux-ARM/ImGui/libImGui.a -lopengl32.lib -lSDL2
  LDDEPS += thirdParty/Glad/bin/Dist-linux-ARM/Glad/libGlad.a thirdParty/Assimp/bin/Dist-linux-ARM/Assimp/libAssimp.a thirdParty/imgui/bin/Dist-linux-ARM/ImGui/libImGui.a
  ALL_LDFLAGS += $(LDFLAGS) -s
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),dist_arm64)
  RESCOMP = windres
  TARGETDIR = ../bin/Dist-linux-ARM64/Vortex
  TARGET = $(TARGETDIR)/libVortex.a
  OBJDIR = ../bin-int/Dist-linux-ARM64/Vortex
  PCH = source/vpch.h
  GCH = $(OBJDIR)/$(notdir $(PCH)).gch
  DEFINES += -D_CRT_SECURE_NO_WARNINGS -DVE_PLATFORM_LINUX -DVE_DIST
  INCLUDES += -Isource -IthirdParty/spdlog/include -I../include -IthirdParty/Glad/include -IthirdParty/glm -IthirdParty/imgui -IthirdParty/Entt/include -IthirdParty/stb_image -IthirdParty/Assimp/include
  FORCE_INCLUDE += -include $(OBJDIR)/$(notdir $(PCH))
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O2 -O2 -fcoroutines
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O2 -std=c++2a -O2 -fcoroutines
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += thirdParty/Glad/bin/Dist-linux-ARM64/Glad/libGlad.a thirdParty/Assimp/bin/Dist-linux-ARM64/Assimp/libAssimp.a thirdParty/imgui/bin/Dist-linux-ARM64/ImGui/libImGui.a -lopengl32.lib -lSDL2
  LDDEPS += thirdParty/Glad/bin/Dist-linux-ARM64/Glad/libGlad.a thirdParty/Assimp/bin/Dist-linux-ARM64/Assimp/libAssimp.a thirdParty/imgui/bin/Dist-linux-ARM64/ImGui/libImGui.a
  ALL_LDFLAGS += $(LDFLAGS) -s
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

OBJECTS := \
	$(OBJDIR)/ApplicationClass.o \
	$(OBJDIR)/Layer.o \
	$(OBJDIR)/LayerStack.o \
	$(OBJDIR)/Logger.o \
	$(OBJDIR)/CameraController.o \
	$(OBJDIR)/ComponentModifiers.o \
	$(OBJDIR)/ImGuiBuild.o \
	$(OBJDIR)/ImGuiLayer.o \
	$(OBJDIR)/JobScheduler.o \
	$(OBJDIR)/OpenGLBuffers.o \
	$(OBJDIR)/OpenGLContext.o \
	$(OBJDIR)/OpenGLFramebuffer.o \
	$(OBJDIR)/OpenGLRendererAPI.o \
	$(OBJDIR)/OpenGLShader.o \
	$(OBJDIR)/OpenGLTexture.o \
	$(OBJDIR)/SDLInput.o \
	$(OBJDIR)/SDLWindow.o \
	$(OBJDIR)/Buffers.o \
	$(OBJDIR)/Framebuffer.o \
	$(OBJDIR)/Mesh.o \
	$(OBJDIR)/RenderCommand.o \
	$(OBJDIR)/Renderer2D.o \
	$(OBJDIR)/RendererAPI.o \
	$(OBJDIR)/Shader.o \
	$(OBJDIR)/SubTexture2D.o \
	$(OBJDIR)/Texture.o \
	$(OBJDIR)/vpch.o \
	$(OBJDIR)/stb_image.o \

RESOURCES := \

CUSTOMFILES := \

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

$(TARGET): $(GCH) ${CUSTOMFILES} $(OBJECTS) $(LDDEPS) $(RESOURCES) | $(TARGETDIR)
	@echo Linking Vortex
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(CUSTOMFILES): | $(OBJDIR)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning Vortex
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild:
	$(PREBUILDCMDS)

prelink:
	$(PRELINKCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) $(PCH) | $(OBJDIR)
$(GCH): $(PCH) | $(OBJDIR)
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
else
$(OBJECTS): | $(OBJDIR)
endif

$(OBJDIR)/ApplicationClass.o: source/Core/ApplicationClass.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Layer.o: source/Core/Layer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/LayerStack.o: source/Core/LayerStack.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Logger.o: source/Core/Logger.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/CameraController.o: source/Environment/CameraController.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ComponentModifiers.o: source/Environment/ComponentModifiers.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ImGuiBuild.o: source/ImGui/ImGuiBuild.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ImGuiLayer.o: source/ImGui/ImGuiLayer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/JobScheduler.o: source/Jobs/JobScheduler.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/OpenGLBuffers.o: source/Platforms/OpenGL/OpenGLBuffers.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/OpenGLContext.o: source/Platforms/OpenGL/OpenGLContext.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/OpenGLFramebuffer.o: source/Platforms/OpenGL/OpenGLFramebuffer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/OpenGLRendererAPI.o: source/Platforms/OpenGL/OpenGLRendererAPI.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/OpenGLShader.o: source/Platforms/OpenGL/OpenGLShader.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/OpenGLTexture.o: source/Platforms/OpenGL/OpenGLTexture.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/SDLInput.o: source/Platforms/SDL/SDLInput.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/SDLWindow.o: source/Platforms/SDL/SDLWindow.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Buffers.o: source/Renderer/Buffers.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Framebuffer.o: source/Renderer/Framebuffer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Mesh.o: source/Renderer/Mesh.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/RenderCommand.o: source/Renderer/RenderCommand.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Renderer2D.o: source/Renderer/Renderer2D.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/RendererAPI.o: source/Renderer/RendererAPI.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Shader.o: source/Renderer/Shader.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/SubTexture2D.o: source/Renderer/SubTexture2D.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Texture.o: source/Renderer/Texture.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/vpch.o: source/vpch.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/stb_image.o: thirdParty/stb_image/stb_image.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(OBJDIR)/$(notdir $(PCH)).d
endif